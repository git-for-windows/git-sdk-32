name: sync

on:
  schedule:
    - cron: "59 2 * * *"
  workflow_dispatch:
    inputs:
      debug_with_ssh_key:
        description: 'Public SSH key to use to debug failures'
        required: false

env:
  GIT_CONFIG_PARAMETERS: "'user.name=Git for Windows Build Agent' 'user.email=ci@git-for-windows.build' 'windows.sdk64.path=' 'windows.sdk32.path=${{ github.workspace }}' 'http.sslbackend=schannel' 'core.autocrlf=false' 'checkout.workers=16'"
  HOME: "${{ github.workspace }}\\home\\git-ci"
  MSYSTEM: MINGW32

jobs:
  sync:
    if: github.event.repository.fork == false || github.event.inputs.debug_with_ssh_key != ''
    runs-on: windows-latest
    environment: sync
    steps:
      - name: clone git-sdk-32
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          token: ${{ secrets.PUSH_TOKEN }}
      - name: clone build-extra
        uses: actions/checkout@v3
        with:
          path: usr\\src\\build-extra
          ref: main
          repository: git-for-windows/build-extra
      - name: please sync --only-32-bit
        shell: bash
        run: sh -x usr/src/build-extra/please.sh sync --force --only-32-bit
      - name: autorebase
        run: .\autorebase.bat
      - name: use git-sdk-32's Bash
        run: "usr\\bin\\bash.exe -lc 'cygpath -aw /usr/bin >>$GITHUB_PATH && cygpath -aw /mingw32/bin >>$GITHUB_PATH'"
      - name: commit & push 32-bit SDK
        shell: bash
        run: |
          set -x &&
          sh -x /usr/src/build-extra/commit-msys2.sh commit &&
          git -C / push origin ${{ github.ref }}
      - name: Debug using tmate
        if: failure() && github.event.inputs.debug_with_ssh_key != ''
        shell: bash
        run: |
          # Install tmate
          pacman -Sy --noconfirm tmate openssh &&

          # Restrict SSH access to the "actor", i.e. the GitHub user who triggered this workflow
          mkdir -p ~/.ssh &&
          echo '${{github.event.inputs.debug_with_ssh_key}}' >~/.ssh/authorized_keys &&

          # Generate an SSH key (needed for tmate)
          echo -e 'y\n' | ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa &&

          # Start tmate session
          export CHERE_INVOKING=1 &&
          tmate -S /tmp/tmate.sock -a ~/.ssh/authorized_keys new-session -d &&
          tmate -S /tmp/tmate.sock wait tmate-ready &&

          # Print SSH invocation every 5 seconds, until tmate session has terminated
          while test -e /tmp/tmate.sock
          do
            tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
            sleep 5
          done
